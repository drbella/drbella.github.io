#!/usr//bin/perl

# -------------------------------------------------------------------
# CGI Magic Perl Routines Library
#
# cgi-lib.magic
#
# (c)CGI Magic 1997
#
# Version 1.02
# Released February-13-1997
$magic_lib_version_number = 1.01;
# -------------------------------------------------------------------


# --- SEND MAIL -----------------------------------------------------
# --- a routine to accept fields for e-mailing, and send them using -
# --- the UNIX SENDMAIL utility -------------------------------------

sub send_mail
{
    	local($from, $to, $subject, $messagebody) = @_;

	open (SENDMAIL, "| $mail_program -t -n");

	print SENDMAIL <<Mail_Headers;
From:           $from
To: 	        $to
Reply-To:       $from
Subject:        $subject
X-Remote-Host:  $ENV{'REMOTE_ADDR'}
Mail_Headers
	
	print SENDMAIL "Cc: ", $cc, "\n";
	print SENDMAIL "\n", $messagebody, "\n";

	close (MAIL);

} # end of sub send_mail



# --- GET DATE ------------------------------------------------------
# --- a routine to obtain the current local date and time using the -
# --- 'localtime' function ------------------------------------------

sub get_date
{

   	@days = ('Sunday','Monday','Tuesday','Wednesday','Thursday',
                 'Friday','Saturday');
   	@months = ('January','February','March','April','May','June','July',
                   'August','September','October','November','December');

   	($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) 
							= localtime(time);
	if ($mday < 10) { $mday = "0$mday"; }
	if ($mon < 10)  { $mon = "0$mon";  }
   	if ($hour < 10) { $hour = "0$hour"; }
   	if ($min < 10) { $min = "0$min"; }
   	if ($sec < 10) { $sec = "0$sec"; }

   	$date = "$days[$wday] $months[$mon] $mday 19$year $hour\:$min\:$sec";
	$date_now = "$hour\:$min\:$sec $mon/$mday/$year";
	$date_counter = "$days[$wday] $months[$mon] $mday 19$year - $hour\:$min\:$sec";

} # end of sub get_date



# --- PARSE FORM DATA -------------------------------------------------
# --- receives and parses incoming form data --------------------------

sub parse_form_data
{
    local (*FORM_DATA) = @_;

    local ( $request_method, $query_string, @key_value_pairs,
           $key_value, $key, $value);

    $request_method = $ENV{'REQUEST_METHOD'};

    if ($request_method eq "GET") {
        $query_string = $ENV{'QUERY_STRING'};
    } elsif ($request_method eq "POST") {
        read (STDIN, $query_string, $ENV{'CONTENT_LENGTH'});
    } else {
        &return_error (500, "Server Error",
                       "Server uses unsupported method");
    }

    @key_value_pairs = split (/&/, $query_string);

    foreach $key_value (@key_value_pairs) {
        ($key, $value) = split (/=/, $key_value);
        $value =~ tr/+/ /;
        $value =~ s/%([\dA-Fa-f][\dA-Fa-f])/pack ("C", hex ($1))/eg;

        if (defined($FORM_DATA{$key})) {
            $FORM_DATA{$key} = join ("\0", $FORM_DATA{$key}, $value);
        } else {
            $FORM_DATA{$key} = $value;
        }
    }
} # end of sub parse_form_data


# --- RETURN ERROR ----------------------------------------------------
# --- returns an error message ----------------------------------------

sub return_error
{
    local ($status, $keyword, $message) = @_;

    print "Content-type: text/html", "\n";
    print "Status: ", $status, " ", $keyword, "\n\n";

    print <<End_of_Error;

<title>CGI Program - Unexpected Error</title>
<h1>$keyword</h1>
<hr>$message</hr>
Please contact $webmaster for more information.

End_of_Error

    exit(1);

} # end of sub return_error

1;

# ------------------------------------------------------------------




